[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "a3x"
version = "0.1.0" # You can update this as you develop
description = "A3X Agent Project"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"} # Or choose another license
# Add authors/maintainers if desired
# authors = [
#   { name="Your Name", email="you@example.com" },
# ]
# maintainers = [
#   { name="Your Name", email="you@example.com" },
# ]

# Classifiers help users find your project
# Full list: https://pypi.org/classifiers/
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License", # Match the license above
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    # Core web/async
    "fastapi",
    "uvicorn[standard]",
    "requests",
    "httpx>=0.27.0,<0.29.0", # Pinned
    "aiohttp",
    "anyio",

    # Langchain Suite (v0.3 compatible)
    "langchain>=0.3.0,<0.4",
    "langchain-community>=0.3.0,<0.4",
    "langchain-core>=0.3.0,<0.4",
    "langchain-openai>=0.2.0,<0.3",
    "langchain-text-splitters>=0.3.0,<0.4",
    "langsmith>=0.1.0,<0.2.0", # Pinned

    # Data handling / ML Core
    "python-dotenv",
    "unstructured",
    "tiktoken",
    "ollama>=0.4.0,<0.5.0", # Pinned
    "sqlalchemy>=2.0.0,<2.1.0", # Pinned
    "faiss-cpu",
    "pypdf",
    "peft",
    "accelerate",
    "datasets",
    "sentence-transformers",
    "pydantic>=2.0.0,<3.0.0", # Pinned to v2
    "Pillow",
    "ultralytics",
    "pytesseract",
    
    # Web Scraping / Interaction
    "beautifulsoup4",
    "lxml",
    "readability-lxml",
    "playwright",
    "duckduckgo-search",

    # Desktop Interaction
    "pyperclip",
    "pyautogui",
    "mss",

    # Utilities
    "rich",
    "python-slugify",

    # Testing (often moved to optional-dependencies)
    "pytest",
    "pytest-asyncio",
    "pytest-mock",
    "markdown2",
    "bitsandbytes",
    "xhtml2pdf",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.3.5",
    "pytest-mock>=3.14.0",
    "pytest-asyncio>=0.26.0",
    "pytest-cov>=5.0.0",
    "pytest-anyio>=0.0.0",
    "ruff>=0.6.2",
    "black>=24.4.2",
    "pre-commit>=3.0.0",
    "tox>=4.0.0",
]

[project.scripts]
# If you want to make assistant_cli.py runnable from anywhere after installation
# assistant-cli = "a3x.cli.main:app" # Example path, adjust based on actual file/function
a3x = "a3x.cli.main:run_cli" # Pointing to the correct entry function run_cli

[tool.pytest.ini_options]
pythonpath = ["."] # Add current directory to python path for imports
testpaths = ["tests"]
asyncio_mode = "auto"

[tool.setuptools]
# Include package data like prompts or schemas
package-data = {"a3x" = ["py.typed", "prompts/*", "core/*.json"]}

[tool.setuptools.packages.find]
where = ["."]  # Look in the root directory
include = ["a3x*"]  # Include only the 'a3x' directory and its subpackages
exclude = ["tests*", "venv*", ".venv*"] # Ensure tests and venv are excluded


# --- Optional: Ruff Linter/Formatter Configuration ---
[tool.ruff]
line-length = 100 # Example, adjust as needed
select = ["E", "F", "W", "I", "UP", "F401", "F841", "F821"] # Add specific codes if desired
ignore = []

# Exclude external directories like llama.cpp
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "llama.cpp", # <<< Added exclusion >>>
]

[tool.ruff.format]
quote-style = "double"

# --- Optional: MyPy Static Type Checking Configuration ---
# [tool.mypy]
# python_version = "3.11"
# warn_return_any = true
# warn_unused_configs = true
# exclude = ["\.venv", "build", "dist"] 